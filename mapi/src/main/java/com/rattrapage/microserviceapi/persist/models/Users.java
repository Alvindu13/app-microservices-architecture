package com.rattrapage.microserviceapi.persist.models;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.rattrapage.microserviceapi.utils.FileContentStore;
import lombok.*;
import org.springframework.beans.factory.annotation.Autowired;

import javax.persistence.*;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;

@Entity(name = "Users")
@Getter
@Setter @NoArgsConstructor @AllArgsConstructor
@Table(name = "users")
//On préfère l'appeler Users plutôt qu'User pour éviter des conflits avec d'autres classes User
//Par défaut hibernate va créer les tables avec une convention de nommage par défaut qui est la plus couremment utilisée
public class Users {



    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    private String username;

    @Column(length = 16, nullable = false, unique = true)
    private String pseudo;

    //On respecte le format attendu
    //@JsonFormat(pattern="yyyy-MM-dd")
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private Date createdDate;

    // TODO
    @Email
    //cette resource n'est visible que si l'utilisateur connecté qui souhaite accéder à l'endpoint en est le propriétaire
    private String email;

    private String password;

    //@JsonIgnore
    @Transient
    private String confirmedPassword;

    private boolean actived;

    @ManyToMany(fetch = FetchType.EAGER)
    private Collection<AppRole> roles = new ArrayList<>();

    @OneToMany(
            mappedBy = "users",
            cascade = CascadeType.ALL,
            orphanRemoval = true
    )
    @JsonManagedReference
    public List<Files> files = new ArrayList<>();

    public Users(String username, String pseudo, Date createdDate, @Email String email, String password, boolean actived, Collection<AppRole> roles, List<Files> files) {
        this.username = username;
        this.pseudo = pseudo;
        this.createdDate = createdDate;
        this.email = email;
        this.password = password;
        this.actived = actived;
        this.roles = roles;
        this.files = files;
    }

    public void addFile(Files file) {
        System.out.println("//");
        System.out.println(file.getName());

        files.add(file);
        file.setUsers(this);

    }

    public void removeFileApp(Files file) {
        files.remove(file);
        file.setUsers(null);
    }

    public void addRole(AppRole appRole) {
        System.out.println("//");
        System.out.println(appRole.getRoleName());

        roles.add(appRole);
        //appRole.setUsers(this);

    }

    public void removeRole(AppRole appRole) {
        roles.remove(appRole);
        //appRole.setUsers(null);
    }


    //Getters and setters + constructor generated by lombok


}
